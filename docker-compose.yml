services:
  # DATABASE E MESSAGGISTICA
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    restart: always
    networks:
      - marine_net
    
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: always
    networks:
      - marine_net

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    restart: always
    networks:
      - marine_net

  # Schema Registry
  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    container_name: schema-registry
    depends_on:
      - kafka
      - zookeeper
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - marine_net
    restart: always
  
  # Schema Registry UI
  schema-registry-ui:
    platform: linux/amd64
    image: landoop/schema-registry-ui:latest
    container_name: schema-registry-ui
    depends_on:
      - schema-registry
    ports:
      - "8000:8000"
    environment:
      SCHEMAREGISTRY_URL: http://schema-registry:8081
      PROXY: "true"
    networks:
      - marine_net
    restart: always

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # Web UI
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    restart: unless-stopped
    networks:
      - marine_net

  create_buckets:
    build:
      context: ./setup_minio
      dockerfile: Dockerfile
    container_name: create_buckets
    depends_on:
      - minio
    environment:
      - MINIO_ENDPOINT=minio:9000
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
    volumes:
      - ./setup_minio:/setup
    networks:
      - marine_net
    restart: "no"

  # Create DLQ topics
  create_dlq_topics:
    image: python:3.9
    container_name: create_dlq_topics
    depends_on:
      - kafka
    volumes:
      - ./scripts:/scripts
    working_dir: /scripts
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    command: ["sh", "-c", "pip install kafka-python && python create_dlq_topics.py"]
    restart: "no"
    networks:
      - marine_net

  # PRODUCER LAYER
  buoy_producer:
    build:
      context: ./buoy_producer
    container_name: buoy_producer
    depends_on:
      - kafka
      - schema-registry
      - create_dlq_topics
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC=buoy_data
      - GENERATE_INTERVAL_SECONDS=30
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - DLQ_TOPIC=buoy_data_dlq
    volumes:
      - ./schemas:/app/schemas  # Mount schemas directory
    restart: always
    networks:
      - marine_net

  satellite_producer:
    build:
      context: ./satellite_producer 
    container_name: satellite_producer
    depends_on:
      - kafka
      - minio
      - create_buckets
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC=satellite_imagery
      - FETCH_INTERVAL_SECONDS=900
      - SH_CLIENT_ID=sh-eb560cfe-5964-4ac6-a0b0-d87c8e03af4b
      - SH_CLIENT_SECRET=qZywwuvH6Bqq0TmbDuoNkW9SxgTVO4HA
      - SH_TOKEN_URL=https://identity.dataspace.copernicus.eu/auth/realms/CDSE/protocol/openid-connect/token
      - SH_BASE_URL=https://sh.dataspace.copernicus.eu
      - MINIO_ENDPOINT=minio:9000
      - MINIO_BUCKET=bronze
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
    volumes:
      - ./schemas:/app/schemas
    restart: always
    networks:
      - marine_net

  # PROCESSING LAYER (NUOVI JOB FLINK)
  image_standardizer:
    build:
      context: ./image_standardizer  # Ex data_processor
    container_name: image_standardizer
    ports:
      - "8082:8081"
    depends_on:
      - kafka
      - minio
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SATELLITE_TOPIC=satellite_imagery
      - PROCESSED_IMAGERY_TOPIC=processed_imagery  # Nuovo topic
    volumes:
      - ./common:/opt/flink/usrlib/common
    networks:
      - marine_net
    restart: on-failure

  sensor_analyzer:
    build:
      context: ./sensor_analyzer
    container_name: sensor_analyzer
    ports:
      - "8085:8081"
    depends_on:
      - kafka
      - minio
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - BUOY_TOPIC=buoy_data
      - ANALYZED_SENSOR_TOPIC=analyzed_sensor_data
      - MINIO_ENDPOINT=minio:9000
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
    volumes:
      - ./common:/opt/flink/usrlib/common
    networks:
      - marine_net
    restart: on-failure

  pollution_detector:
    build:
      context: ./pollution_detector  # Ex pollution_analyzer
    container_name: pollution_detector
    ports:
      - "8083:8081"
    depends_on:
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ANALYZED_SENSOR_TOPIC=analyzed_sensor_data
      - PROCESSED_IMAGERY_TOPIC=processed_imagery
      - ANALYZED_DATA_TOPIC=analyzed_data
      - HOTSPOTS_TOPIC=pollution_hotspots
      - ALERTS_TOPIC=sensor_alerts
    networks:
      - marine_net
    restart: on-failure

  ml_prediction_job:
    build:
      context: ./ml_prediction
    container_name: ml_prediction_job
    ports:
      - "8084:8081"
    depends_on:
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ANALYZED_SENSOR_TOPIC=analyzed_sensor_data
      - PROCESSED_IMAGERY_TOPIC=processed_imagery
      - PREDICTIONS_TOPIC=pollution_predictions
    networks:
      - marine_net
    restart: on-failure

  # DATABASE LAYER
  postgres:
    image: postgres:14-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=marine_pollution
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - marine_net
    restart: unless-stopped

  timescaledb:
    image: timescale/timescaledb:latest-pg14
    container_name: timescaledb
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=marine_pollution
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    networks:
      - marine_net
    restart: unless-stopped

  # CONSUMER LAYER
  storage_consumer:
    build:
      context: ./storage_consumer
    container_name: storage_consumer
    depends_on:
      - kafka
      - timescaledb
      - minio
      - create_buckets
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - TIMESCALE_HOST=timescaledb
      - TIMESCALE_DB=marine_pollution
      - TIMESCALE_USER=postgres
      - TIMESCALE_PASSWORD=postgres
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      # Topic subscriptions
      - BUOY_TOPIC=buoy_data
      - SATELLITE_TOPIC=satellite_imagery
      - PROCESSED_IMAGERY_TOPIC=processed_imagery
      - ANALYZED_SENSOR_TOPIC=analyzed_sensor_data
      - ANALYZED_TOPIC=analyzed_data
      - HOTSPOTS_TOPIC=pollution_hotspots
      - PREDICTIONS_TOPIC=pollution_predictions
      - ALERTS_TOPIC=sensor_alerts
    networks:
      - marine_net
    restart: on-failure

  dashboard_consumer:
    build:
      context: ./dashboard_consumer
    container_name: dashboard_consumer
    depends_on:
      - kafka
      - redis
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # Topic subscriptions (tutti i topic)
    volumes:
      - ./common:/app/common
    networks:
      - marine_net
    restart: on-failure

  alert_manager:
    build:
      context: ./alert_manager
    container_name: alert_manager
    depends_on:
      - kafka
      - redis
      - postgres
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=marine_pollution
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - ALERTS_TOPIC=sensor_alerts
      # Enhanced notification configuration
      - EMAIL_ENABLED=false
      - EMAIL_SERVER=smtp.example.com
      - EMAIL_PORT=587
      - EMAIL_USER=alerts@example.com
      - EMAIL_PASSWORD=password
      - HIGH_PRIORITY_RECIPIENTS=emergency@example.com,operations@example.com
      - MEDIUM_PRIORITY_RECIPIENTS=operations@example.com
      - LOW_PRIORITY_RECIPIENTS=monitoring@example.com
      # SMS configuration (optional)
      - SMS_ENABLED=false
      # Webhook configuration (optional)
      - WEBHOOK_ENABLED=false
      # Regional configuration
      - REGIONAL_CONFIG={"upper_bay":{"email_recipients":["upperchesapeake@example.com"]}}
    networks:
      - marine_net
    restart: on-failure

  # DLQ Consumer
  dlq_consumer:
    build:
      context: ./dlq_consumer
    container_name: dlq_consumer
    depends_on:
      - kafka
      - redis
      - postgres
      - create_dlq_topics
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=marine_pollution
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - marine_net
    restart: on-failure

  # VISUALIZATION LAYER
  # STREAMLIT DASHBOARD
  dashboard:
    build:
      context: ./dashboard
    container_name: marine_dashboard
    ports:
      - "8501:8501"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=marine_pollution
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - TIMESCALE_HOST=timescaledb
      - TIMESCALE_DB=marine_pollution
      - TIMESCALE_USER=postgres
      - TIMESCALE_PASSWORD=postgres
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    volumes:
      - ./dashboard:/app
    networks:
      - marine_net
    depends_on:
      - redis
      - postgres
      - timescaledb
      - minio
    restart: on-failure

networks:
  marine_net:
    driver: bridge

volumes:
  minio_data:
  dashboard_data:
  postgres_data:
  timescaledb_data: