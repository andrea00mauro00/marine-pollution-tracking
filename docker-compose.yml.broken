version: '3.8'

networks:
  marine-network:
    driver: bridge

volumes:
  kafka-data:
  zookeeper-data:
  postgres-data:
  timescale-data:
  minio-data:
  redis-data:
  elasticsearch-data:
  prometheus-data:


services:
  # ==================== CORE INFRASTRUCTURE ====================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    networks:
      - marine-network
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - marine-network
    ports:
      - "9092:9092"
      - "29092:29092"

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    container_name: schema-registry
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - marine-network
    ports:
      - "8081:8081"

  schema-registry-ui:
    image: landoop/schema-registry-ui:latest
    container_name: schema-registry-ui
    depends_on:
      - schema-registry
    environment:
      SCHEMAREGISTRY_URL: http://schema-registry:8081
    networks:
      - marine-network
    ports:
      - "8000:8000"

  # ==================== DATABASES ====================
  postgres:
    image: postgres:14-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: marine_db
      POSTGRES_USER: marine_user
      POSTGRES_PASSWORD: marine_password
      POSTGRES_MULTIPLE_DATABASES: "marine_db,pollution_db"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./setup_database/init_scripts/postgres:/docker-entrypoint-initdb.d
    networks:
      - marine-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U marine_user -d marine_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  timescaledb:
    image: timescale/timescaledb-ha:pg14-latest
    container_name: timescaledb
    environment:
      POSTGRES_DB: marine_timeseries
      POSTGRES_USER: marine_user
      POSTGRES_PASSWORD: marine_password
    volumes:
      - timescale-data:/var/lib/postgresql/data
      - ./setup_database/init_scripts/timescale:/docker-entrypoint-initdb.d
    networks:
      - marine-network
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U marine_user -d marine_timeseries"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    volumes:
      - redis-data:/data
    networks:
      - marine-network
    ports:
      - "6379:6379"

  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    networks:
      - marine-network
    ports:
      - "9000:9000"
      - "9001:9001"

  # ==================== PRODUCERS ====================
  buoy_producer:
    build: ./buoy_producer
    container_name: buoy_producer
    depends_on:
      - kafka
      - schema-registry
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
    networks:
      - marine-network
    ports:
      - "8082:8080"
    restart: unless-stopped

  satellite_producer:
    build: ./satellite_producer
    container_name: satellite_producer
    depends_on:
      - kafka
      - schema-registry
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
    networks:
      - marine-network
    ports:
      - "8083:8080"
    restart: unless-stopped

  # ==================== PROCESSING SERVICES ====================
  image_standardizer:
    build: ./image_standardizer
    container_name: image_standardizer
    depends_on:
      - kafka
      - redis
      - minio
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      REDIS_HOST: redis
      MINIO_ENDPOINT: minio:9000
    networks:
      - marine-network
    ports:
      - "8082:8081"

  sensor_analyzer:
    build: ./sensor_analyzer
    container_name: sensor_analyzer
    depends_on:
      - kafka
      - redis
      - timescaledb
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      REDIS_HOST: redis
      TIMESCALE_HOST: timescaledb
    networks:
      - marine-network
    ports:
      - "8085:8081"

  pollution_detector:
    build: ./pollution_detector
    container_name: pollution_detector
    depends_on:
      - kafka
      - redis
      - postgres
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      REDIS_HOST: redis
      POSTGRES_HOST: postgres
    networks:
      - marine-network
    ports:
      - "8083:8081"

  ml_prediction_job:
    build: ./ml_prediction
    container_name: ml_prediction_job
    depends_on:
      - kafka
      - timescaledb
      - minio
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      TIMESCALE_HOST: timescaledb
      MINIO_ENDPOINT: minio:9000
    networks:
      - marine-network
    ports:
      - "8084:8081"

  # ==================== CONSUMERS ====================
  storage_consumer:
    build: ./storage_consumer
    container_name: storage_consumer
    depends_on:
      - kafka
      - postgres
      - timescaledb
      - minio
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      POSTGRES_HOST: postgres
      TIMESCALE_HOST: timescaledb
      MINIO_ENDPOINT: minio:9000
    networks:
      - marine-network
    ports:
      - "8084:8080"
    restart: unless-stopped

  dlq_consumer:
    build: ./dlq_consumer
    container_name: dlq_consumer
    depends_on:
      - kafka
      - postgres
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      POSTGRES_HOST: postgres
    networks:
      - marine-network
    restart: unless-stopped

  alert_manager:
    build: ./alert_manager
    container_name: alert_manager
    depends_on:
      - kafka
      - postgres
      - redis
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
    networks:
      - marine-network
    ports:
      - "8085:8080"
    restart: unless-stopped

  # ==================== NEW MODULAR DASHBOARD ====================
  dashboard:
    build: ./dashboard
    container_name: dashboard
    depends_on:
      - postgres
      - timescaledb
      - redis
      - minio
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: marine_db
      POSTGRES_USER: marine_user
      POSTGRES_PASSWORD: marine_password
      TIMESCALE_HOST: timescaledb
      TIMESCALE_DB: marine_timeseries
      TIMESCALE_USER: marine_user
      TIMESCALE_PASSWORD: marine_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    networks:
      - marine-network
    ports:
      - "8501:8501"
    restart: unless-stopped
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
      - xpack.monitoring.collection.enabled=true
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - marine-network
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: kibana
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.monitoring.ui.container.elasticsearch.enabled=true
    networks:
      - marine-network
    ports:
      - "5601:5601"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Logstash for log processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.9.0
    container_name: logstash
    depends_on:
      - elasticsearch
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
    environment:
      - "LS_JAVA_OPTS=-Xmx1g -Xms1g"
    networks:
      - marine-network
    ports:
      - "5044:5044"
      - "12201:12201/udp"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600/_node/stats || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - marine-network
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "8086:8080"
    networks:
      - marine-network
    restart: unless-stopped
